[{"path":"https://lcrawlab.github.io/recallreproducibility/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 recallreproducibility authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/01_figure1b-e.html","id":"simulated-data-with-one-true-group","dir":"Articles","previous_headings":"","what":"Simulated Data With One True Group","title":"1. Clustering Simple Simulated Data (Figure 1)","text":"First, simulate data using splatter convert data format SeuratObject. Setting group.prob = c(1.0) results single group. , run typical analysis using Seurat also cluster using recall. Finally, plot UMAP results including true labels (one case), clusters found Seurat default parameters, clusters found recall.","code":"sim.groups <- splatter::splatSimulate(group.prob = c(1.0), method = \"groups\",                                       verbose = FALSE,                                       nGenes = 1000,                                       batchCells = 1000,                                       dropout.type = \"experiment\",                                        de.prob = 0.05)  seurat_obj <- Seurat::as.Seurat(sim.groups, counts = \"counts\", data = NULL) seurat_obj <- SeuratObject::RenameAssays(object = seurat_obj, originalexp = 'RNA')  seurat_obj@meta.data$Group = 1 seurat_obj <- recall::seurat_workflow(seurat_obj, num_variable_features = 1000, resolution_param = 0.8) seurat_obj <- recall::FindClustersRecall(seurat_obj, cores=6) simulation_one_group_scatter <- recallreproducibility::custom_scatter(seurat_obj, reduction = \"umap\", group_by = \"Group\", x_title = \"UMAP 1\", y_title = \"UMAP 2\", pt.size = 6) + Seurat::NoLegend() simulation_one_group_seurat_scatter <- recallreproducibility::custom_scatter(seurat_obj, reduction = \"umap\", group_by = \"seurat_clusters\", x_title = \"UMAP 1\", y_title = \"UMAP 2\", pt.size = 6) + Seurat::NoLegend()  simulation_one_group_recall_scatter <- recallreproducibility::custom_scatter(seurat_obj, reduction = \"umap\", group_by = \"recall_clusters\", x_title = \"UMAP 1\", y_title = \"UMAP 2\", pt.size = 6) + Seurat::NoLegend()  ggplot2::ggsave(\"one_group_scatter.png\", simulation_one_group_scatter, width = 1.2 * 2^12, height = 2^12, units = \"px\") ggplot2::ggsave(\"one_group_seurat_scatter.png\", simulation_one_group_seurat_scatter, width = 1.2 * 2^12, height = 2^12, units = \"px\") ggplot2::ggsave(\"one_group_recall_scatter.png\", simulation_one_group_recall_scatter, width = 1.2 * 2^12, height = 2^12, units = \"px\")"},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/01_figure1b-e.html","id":"simulated-data-with-three-true-groups","dir":"Articles","previous_headings":"","what":"Simulated Data With Three True Groups","title":"1. Clustering Simple Simulated Data (Figure 1)","text":"First, simulate data using splatter convert data format SeuratObject. Setting group.prob = c(0.6, 0.2, 0.2) results three groups proportions 60%, 20%, 20%. , run typical analysis using Seurat also cluster using recall. plot UMAP results including true labels, clusters found Seurat default parameters, clusters found recall. plot grid UMAPs.","code":"sim.groups <- splatter::splatSimulate(group.prob = c(0.6, 0.2, 0.2), method = \"groups\",                             verbose = FALSE,                             nGenes = 1000,                             batchCells = 4000,                             dropout.type = \"experiment\",                              de.prob = 0.05)  seurat_obj <- Seurat::as.Seurat(sim.groups, counts = \"counts\", data = NULL) seurat_obj <- SeuratObject::RenameAssays(object = seurat_obj, originalexp = 'RNA') seurat_obj <- recall::seurat_workflow(seurat_obj, num_variable_features = 1000, resolution_param = 0.8) seurat_obj <- recall::FindClustersRecall(seurat_obj, cores=6) simulation_three_groups_group_scatter <- recallreproducibility::custom_scatter(seurat_obj, reduction = \"umap\", group_by = \"Group\", x_title = \"UMAP 1\", y_title = \"UMAP 2\", pt.size = 2) + Seurat::NoLegend() simulation_three_groups_seurat_scatter <- recallreproducibility::custom_scatter(seurat_obj, reduction = \"umap\", group_by = \"seurat_clusters\", x_title = \"UMAP 1\", y_title = \"UMAP 2\", pt.size = 2) + Seurat::NoLegend()  simulation_three_groups_recall_scatter <- recallreproducibility::custom_scatter(seurat_obj, reduction = \"umap\", group_by = \"recall_clusters\", x_title = \"UMAP 1\", y_title = \"UMAP 2\", pt.size = 2) + Seurat::NoLegend()    ggplot2::ggsave(\"three_group_scatter.png\", simulation_three_groups_group_scatter, width = 1.2 * 2^12, height = 2^12, units = \"px\") ggplot2::ggsave(\"three_group_seurat_scatter.png\", simulation_three_groups_seurat_scatter, width = 1.2 * 2^12, height = 2^12, units = \"px\") ggplot2::ggsave(\"three_group_recall_scatter.png\", simulation_three_groups_recall_scatter, width = 1.2 * 2^12, height = 2^12, units = \"px\") column_label_1 <- wrap_elements(panel = textGrob('True Labels', gp = gpar(fontsize = 64))) column_label_2 <- wrap_elements(panel = textGrob('Seurat Default', gp = gpar(fontsize = 64))) column_label_3 <- wrap_elements(panel = textGrob('recall', gp = gpar(fontsize = 64, fontfamily = \"Courier\")))   umap_grid <- column_label_1 + column_label_2 + column_label_3 +   simulation_one_group_scatter + simulation_one_group_seurat_scatter + simulation_one_group_recall_scatter +   column_label_1 + column_label_2 + column_label_3 +   simulation_three_groups_group_scatter + simulation_three_groups_seurat_scatter + simulation_three_groups_recall_scatter +   plot_layout(widths = c(5, 5, 5),               heights = c(1,3,1,3))  ggplot2::ggsave(\"umap_grid.png\", umap_grid, width = 2 * 1.5 * 2^12, height = 2 * 2^12, units = \"px\")"},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/01_figure1b-e.html","id":"replicates-of-the-simple-simulations","dir":"Articles","previous_headings":"","what":"Replicates of the simple simulations","title":"1. Clustering Simple Simulated Data (Figure 1)","text":"repeat simulation 1000 times save results.","code":"num_replicates <- 1000  num_seurat_clusters <- c() num_recall_clusters <- c()  for (i in 1:num_replicates) {   print(\"Replicate\")   print(i)   sim.groups <- splatter::splatSimulate(group.prob = c(1.0),                                         method = \"groups\",                                         seed = i,                                         verbose = FALSE,                                         nGenes = 1000,                                         batchCells = 1000,                                         dropout.type = \"experiment\",                                          de.prob = 0.05)      seurat_obj <- Seurat::as.Seurat(sim.groups, counts = \"counts\", data = NULL)   seurat_obj <- SeuratObject::RenameAssays(object = seurat_obj, originalexp = 'RNA')      seurat_obj@meta.data$Group = 1      seurat_obj <- recall::seurat_workflow(seurat_obj, num_variable_features = 1000, resolution_param = 0.8, algorithm = \"NA\", visualization_method = \"NA\")   seurat_obj <- recall::FindClustersRecall(seurat_obj, cores=12)      num_seurat_clusters[i] <- length(levels(seurat_obj@meta.data$seurat_clusters))   num_recall_clusters[i] <- length(levels(seurat_obj@meta.data$recall_clusters)) }  num_groups <- rep(1, num_replicates)  df_1_group <- data.frame(num_groups, num_seurat_clusters, num_recall_clusters)    num_seurat_clusters <- c() num_recall_clusters <- c()  for (i in 1:num_replicates) {   print(\"Replicate\")   print(i)   sim.groups <- splatter::splatSimulate(group.prob = c(0.6, 0.2, 0.2), method = \"groups\",                                         verbose = FALSE,                                         nGenes = 1000,                                         batchCells = 4000,                                         dropout.type = \"experiment\",                                          de.prob = 0.05)      seurat_obj <- Seurat::as.Seurat(sim.groups, counts = \"counts\", data = NULL)   seurat_obj <- SeuratObject::RenameAssays(object = seurat_obj, originalexp = 'RNA')    seurat_obj <- recall::seurat_workflow(seurat_obj, num_variable_features = 1000, resolution_param = 0.8, algorithm = \"NA\", visualization_method = \"NA\")   seurat_obj <- recall::FindClustersRecall(seurat_obj, cores=24)      num_seurat_clusters[i] <- length(levels(seurat_obj@meta.data$seurat_clusters))   num_recall_clusters[i] <- length(levels(seurat_obj@meta.data$recall_clusters)) }  num_groups <- rep(3, num_replicates)  df_3_groups <- data.frame(num_groups, num_seurat_clusters, num_recall_clusters)   write.csv(df_1_group, \"one_group.csv\") write.csv(df_3_groups, \"three_groups.csv\")"},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/01_figure1b-e.html","id":"plot-results-of-simulation-replicates","dir":"Articles","previous_headings":"","what":"Plot results of simulation replicates","title":"1. Clustering Simple Simulated Data (Figure 1)","text":"now plot panels 1c 1e. First load libraries plotting data manipulation. plot results one group simulations. plot results three groups simulations. Finally, save plots.","code":"library(ggplot2) library(reshape2) library(dplyr) library(ggpattern) Then, we load the clustering results from the simulations above.  df_1_group <- read.csv(\"one_group.csv\", row.names = 1) df_1_group$num_groups <- NULL # drop unnecessary column  df_3_groups <- read.csv(\"three_groups.csv\", row.names = 1) df_3_groups$num_groups <- NULL # drop unnecessary column melted_df_1 <- melt(df_1_group)   df_summary_1_group <- melted_df_1 %>%   group_by(variable) %>%   summarize(mean = mean(value),             sd = sd(value))  colnames(df_summary_1_group) <- c(\"method\", \"mean\", \"sd\")   small_text_size <- 32 large_text_size <-36   barplot_error_bars1 <- ggplot(df_summary_1_group) +   geom_bar_pattern(aes(x=method, y=mean, fill=method, pattern=method),                     stat=\"identity\",                    position = \"dodge\",                    color = \"black\",                    alpha = 0.7,                    pattern_fill = \"black\",                    pattern_angle = 45,                    pattern_density = 0.05,                    pattern_spacing = 0.05,                    pattern_key_scale_factor = 0.6) +   scale_pattern_manual(values = c(num_seurat_clusters = \"stripe\", num_recall_clusters = \"none\")) +    geom_errorbar( aes(x=method, ymin=mean-sd, ymax=mean+sd), width = 0.5, size=1) +    geom_hline(size = 1.5, aes(yintercept = 1, linetype=\"True Number\\nof Groups\")) +   scale_linetype_manual(values = 2) +   theme_bw() +    xlab(\"Method\") +   ylab(\"Number of Clusters\") +   theme(axis.text.x = element_text(size = small_text_size, family = \"Courier\", color=\"black\"),         axis.text.y = element_text(size = small_text_size, color=\"black\"),         axis.title = element_text(size = large_text_size),         axis.title.x = element_blank(),         strip.text = element_text(size = small_text_size),          legend.text = element_text(size = small_text_size),         legend.title = element_blank(),         plot.title = element_text(size = large_text_size, hjust = 0.5),         legend.position=c(0.73, 0.85),         legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid')) +   scale_x_discrete(labels = c(\"Seurat\", \"recall\")) +   scale_fill_manual(values = c(\"white\", \"red\"), labels = c(\"recall\", \"Seurat\")) +    ylim(0,7) +    guides(fill=\"none\", pattern=\"none\") melted_df_3 <- melt(df_3_groups)   df_summary_3_groups <- melted_df_3 %>%   group_by(variable) %>%   summarize(mean = mean(value),             sd = sd(value))  colnames(df_summary_3_groups) <- c(\"method\", \"mean\", \"sd\")   barplot_error_bars3 <- ggplot(df_summary_3_groups) +   geom_bar_pattern(aes(x=method, y=mean, fill=method, pattern=method),                     stat=\"identity\",                    position = \"dodge\",                    color = \"black\",                    alpha = 0.7,                    pattern_fill = \"black\",                    pattern_angle = 45,                    pattern_density = 0.05,                    pattern_spacing = 0.05,                    pattern_key_scale_factor = 0.6) +   scale_pattern_manual(values = c(num_seurat_clusters = \"stripe\", num_recall_clusters = \"none\")) +    geom_errorbar( aes(x=method, ymin=mean-sd, ymax=mean+sd), width = 0.5, size=1) +    geom_hline(size = 1.5, aes(yintercept = 3, linetype=\"True Number\\nof Groups\")) +   scale_linetype_manual(values = 2) +   theme_bw() +    xlab(\"Method\") +   ylab(\"Number of Clusters\") +    theme(axis.text.x = element_text(size = small_text_size, family = \"Courier\", color=\"black\"),         axis.text.y = element_text(size = small_text_size, color=\"black\"),         axis.title = element_text(size = large_text_size),         axis.title.x = element_blank(),         strip.text = element_text(size = small_text_size),          legend.text = element_text(size = small_text_size),         legend.title = element_blank(),         plot.title = element_text(size = large_text_size, hjust = 0.5),         legend.position=c(0.73, 0.85),         legend.background = element_rect(colour = 'black', fill = 'white', linetype='solid')) +   scale_x_discrete(labels = c(\"Seurat\", \"recall\")) +    scale_fill_manual(values = c(\"white\", \"red\"), labels = c(\"recall\", \"Seurat\")) +    ylim(0,7) +    guides(fill=\"none\", pattern=\"none\") ggsave(\"fig1c.png\", barplot_error_bars1, width = 1.2 * 1.2 * 1440, height = 1.3 * 1440, units = \"px\") ggsave(\"fig1e.png\", barplot_error_bars3, width = 1.2 * 1.2 * 1440, height = 1.3 * 1440, units = \"px\")"},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"plot-the-timing-data-and-rename-callback-to-recall","dir":"Articles","previous_headings":"","what":"plot the timing data and rename callback to recall","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"tissue_timing_df <- read.csv(“tissue_timing_df.csv”, row.names = 1) scAce_timing_df <- read.csv(“scAce_timing.csv”, row.names = 1) tissue_timing_df <- rbind(tissue_timing_df, scAce_timing_df)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"order-factor-levels","dir":"Articles","previous_headings":"","what":"order factor levels","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"tissue_timing_dfmethod<−factor(tissuetimingdfmethod <- factor(tissue_timing_dfmethod, levels=c(“callback”, “sc-SHC”, “CHOIR”, “scAce”))","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"remove-underscores-from-tissue-names","dir":"Articles","previous_headings":"","what":"remove underscores from tissue names","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"tissue_timing_df$tissue <- gsub(\"_\", \"\\n\", tissue_timing_df$tissue) small_text_size <- 16 large_text_size <- 22 p <- ggplot2::ggplot(tissue_timing_df, ggplot2::aes(x=method, y=time, fill=method, label=sprintf(“%0.1f”, round(time, digits = 1)))) + ggplot2::geom_bar(stat = “identity”, alpha = 0.7, colour = ‘black’) + ggplot2::facet_wrap(~tissue, nrow = 2) + ggplot2::xlab(“Tabula Muris Tissues”) + ggplot2::ylab(“Time Taken (minutes)”) + ggplot2::labs(fill = “Method”) + ggplot2::ylim(c(0,18)) + ggplot2::scale_fill_manual(values = c(“red”, “grey”, “black”, “tan”), labels = c(“recall+ZIP”, “sc-SHC”, “CHOIR”, “scAce”)) + ggplot2::theme_bw() + ggplot2::theme(axis.ticks.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_blank(), axis.text = ggplot2::element_text(size = small_text_size), axis.title = ggplot2::element_text(size = large_text_size), strip.text = ggplot2::element_text(size = small_text_size), legend.text = ggplot2::element_text(size = small_text_size, family = “Courier”), legend.title = ggplot2::element_text(size = small_text_size), legend.position = “bottom”) + geom_text(vjust = -0.2) ggsave(“fig2_tabula_muris_timing.png”, p, width = 4 * 1440, height = 4 * 460, units = “px”)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"plot-umaps-for-two-tissues","dir":"Articles","previous_headings":"","what":"plot UMAPs for two tissues","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"diaphragm <- readRDS(file = “Diaphragmcluster_results_seurat.rds”) limb_muscle <- readRDS(file = “Limb_Musclecluster_results_seurat.rds”) diagphragm_scace <- anndata::read_h5ad(“scace_output/Diaphragm.h5ad”) diagphragm_scace <- Seurat::CreateSeuratObject(counts = t(diagphragm_scaceX),meta.data=diagphragmscaceX), meta.data = diagphragm_scaceobs) limb_muscle_scace <- anndata::read_h5ad(“scace_output/Limb_Muscle.h5ad”) limb_muscle_scace <- Seurat::CreateSeuratObject(counts = t(limb_muscle_scaceX),meta.data=limbmusclescaceX), meta.data = limb_muscle_scaceobs)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"add-scace-idents-to-seurat-objs","dir":"Articles","previous_headings":"","what":"add scAce idents to Seurat objs","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"diaphragm@meta.datascAceidents<−diagphragmscace@meta.datascAce_idents <- diagphragm_scace@meta.datascace_cluster limb_muscle@meta.datascAceidents<−limbmusclescace@meta.datascAce_idents <- limb_muscle_scace@meta.datascace_cluster","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"remove-nas","dir":"Articles","previous_headings":"","what":"remove NAs","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"limb_muscle <- subset(limb_muscle, subset = cell_ontology_class %% levels(factor(limb_muscle@meta.datacellontologyclass)))diaphragm<−subset(diaphragm,subset=cellontologyclasscell_ontology_class))) diaphragm <- subset(diaphragm, subset = cell_ontology_class %% levels(factor(diaphragm@meta.datacell_ontology_class)))","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"clean-up-cell-type-labels-for-limb_muscle","dir":"Articles","previous_headings":"","what":"clean up cell type labels for limb_muscle","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"#limb_muscle@meta.datacellontologyclass[limbmuscle@meta.datacell_ontology_class[limb_muscle@meta.datacell_ontology_class == ““] <-”cardiac neuron” #limb_muscle@meta.datacellontologyclass<−trimws(limbmuscle@meta.datacell_ontology_class <- trimws(limb_muscle@meta.datacell_ontology_class, whitespace = ” cell”)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"shorten-cell-type-labels-for-diaphragm","dir":"Articles","previous_headings":"","what":"shorten cell type labels for diaphragm","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"#diaphragm@meta.datacellontologyclass<−trimws(diaphragm@meta.datacell_ontology_class <- trimws(diaphragm@meta.datacell_ontology_class, whitespace = ” cell”)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"sort-levels-by-size-of-group-limb_muscle","dir":"Articles","previous_headings":"","what":"sort levels by size of group (limb_muscle)","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"limb_muscle@meta.datacellontologyclass<−.factor(limbmuscle@meta.datacell_ontology_class <- .factor(limb_muscle@meta.datacell_ontology_class) sorted_limb_muscle_clusters <- names(sort(summary(.factor(na.omit(limb_muscle@meta.datacellontologyclass))),decreasing=TRUE))limbmuscle@meta.datacell_ontology_class))), decreasing = TRUE)) limb_muscle@meta.datacell_ontology_class <- factor(limb_muscle@meta.data$cell_ontology_class, levels = sorted_limb_muscle_clusters)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/07_figure2_S11-16_S37.html","id":"sort-levels-by-size-of-group-diaphragm","dir":"Articles","previous_headings":"","what":"sort levels by size of group (diaphragm)","title":"6. Tabula Muris Cluster Benchmarking (Figure 2, S11-S16, S37)","text":"diaphragm@meta.datacellontologyclass<−.factor(diaphragm@meta.datacell_ontology_class <- .factor(diaphragm@meta.datacell_ontology_class) sorted_diaphragm_clusters <- names(sort(summary(.factor(na.omit(diaphragm@meta.datacellontologyclass))),decreasing=TRUE))diaphragm@meta.datacell_ontology_class))), decreasing = TRUE)) diaphragm@meta.datacell_ontology_class <- factor(diaphragm@meta.data$cell_ontology_class, levels = sorted_diaphragm_clusters) library(callbackreproducibility) library(Seurat) library(ggplot2) library(patchwork) library(grid) y_limits <- c(-30, 12) x_limits <- c(-20, 20) legend_location <- c(0.1, 0.2) tissue <- limb_muscle limb_muscle_curated_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “cell_ontology_class”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + theme(legend.position = legend_location) + guides(color=guide_legend(ncol=2)) + xlim(x_limits) + ylim(y_limits) + scale_colour_discrete(labels = function(x) stringr::str_wrap(x, width = 15)) limb_muscle_default_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “seurat_clusters”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) limb_muscle_callback_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “callback_idents”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) limb_muscle_scSHC_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “scSHC_clusters”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) limb_muscle_CHOIR_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “CHOIR_clusters_0.05”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) limb_muscle_scAce_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “scAce_idents”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) tissue <- diaphragm diaphragm_curated_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “cell_ontology_class”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + theme(legend.position = legend_location) + guides(color=guide_legend(ncol=2)) + xlim(x_limits) + ylim(y_limits) + scale_colour_discrete(labels = function(x) stringr::str_wrap(x, width = 15)) diaphragm_default_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “seurat_clusters”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) diaphragm_callback_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “callback_idents”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) diaphragm_scSHC_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “scSHC_clusters”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) diaphragm_CHOIR_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “CHOIR_clusters_0.05”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) diaphragm_scAce_scatter <- custom_scatter(tissue, reduction = “umap”, group_by = “scAce_idents”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 4) + NoLegend() + xlim(x_limits) + ylim(y_limits) row_label_1 <- wrap_elements(panel = textGrob(‘Diaphragm’, gp = gpar(fontsize = 64), rot = 90)) row_label_2 <- wrap_elements(panel = textGrob(‘Limb Muscle’, gp = gpar(fontsize = 64), rot = 90)) column_label_1 <- wrap_elements(panel = textGrob(‘Curated Labels’, gp = gpar(fontsize = 64))) column_label_2 <- wrap_elements(panel = textGrob(‘recall+ZIP’, gp = gpar(fontsize = 64, fontfamily = “Courier”))) column_label_3 <- wrap_elements(panel = textGrob(‘sc-SHC’, gp = gpar(fontsize = 64, fontfamily = “Courier”))) column_label_4 <- wrap_elements(panel = textGrob(‘CHOIR’, gp = gpar(fontsize = 64, fontfamily = “Courier”))) column_label_5 <- wrap_elements(panel = textGrob(‘scAce’, gp = gpar(fontsize = 64, fontfamily = “Courier”))) patchwork_grid <- plot_spacer() + column_label_1 + column_label_2 + column_label_3 + column_label_4 + column_label_5 + row_label_1 + diaphragm_curated_scatter + diaphragm_callback_scatter + diaphragm_scSHC_scatter + diaphragm_CHOIR_scatter + diaphragm_scAce_scatter + plot_spacer() + column_label_1 + column_label_2 + column_label_3 + column_label_4 + column_label_5 + row_label_2 + limb_muscle_curated_scatter + limb_muscle_callback_scatter + limb_muscle_scSHC_scatter + limb_muscle_CHOIR_scatter + limb_muscle_scAce_scatter + plot_layout(widths = c(1, 5, 5, 5, 5, 5), heights = c(1,3,1,3)) ggsave(“fig2_umap_grid.png”, patchwork_grid, width = 1.8 * 2^13, height = 0.8 * 2^13, units = “px”)","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/08_figure3.html","id":"sort-levels-by-size-of-group-limb_muscle","dir":"Articles","previous_headings":"","what":"sort levels by size of group (limb_muscle)","title":"7. Figure 3","text":"limb_muscle@meta.datacellontologyclass<−.factor(limbmuscle@meta.datacell_ontology_class <- .factor(limb_muscle@meta.datacell_ontology_class) sorted_limb_muscle_clusters <- names(sort(summary(.factor(na.omit(limb_muscle@meta.datacellontologyclass))),decreasing=TRUE))limbmuscle@meta.datacell_ontology_class))), decreasing = TRUE)) limb_muscle@meta.datacell_ontology_class <- factor(limb_muscle@meta.data$cell_ontology_class, levels = sorted_limb_muscle_clusters) revision_fig3_scatter_plots <- function(tissue, tissue_name, legend_pos=c(0.6, 0.2)) { louvain_default <- custom_scatter(tissue, “umap”, group_by = “seurat_clusters”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 2, label=FALSE) + Seurat::NoLegend() louvain_recall <- custom_scatter(tissue, “umap”, group_by = “callback_idents”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 2) + Seurat::NoLegend() cell_ontology <- custom_scatter(tissue, “umap”, group_by = “cell_ontology_class”, x_title = “UMAP 1”, y_title = “UMAP 2”, pt.size = 2) + ggplot2::theme(legend.position = legend_pos, legend.text = ggplot2::element_text(size=20)) + ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size=6), ncol = 1)) + ggplot2::scale_colour_discrete(na.translate = F) column_label_1 <- patchwork::wrap_elements(panel = grid::textGrob(‘Cell Ontology’, gp = grid::gpar(fontsize = 64))) column_label_2 <- patchwork::wrap_elements(panel = grid::textGrob(‘Seurat Default’, gp = grid::gpar(fontsize = 64))) column_label_3 <- patchwork::wrap_elements(panel = grid::textGrob(‘recall+ZIP’, gp = grid::gpar(fontsize = 64, fontfamily = “Courier”))) umap_grid <- column_label_1 + column_label_2 + column_label_3 + cell_ontology + louvain_default + louvain_recall + patchwork::plot_layout(widths = c(5, 5, 5), heights = c(1,3)) return(umap_grid) } fig_3_umap_grid <- revision_fig3_scatter_plots(limb_muscle, “limb_muscle”, legend_pos = c(0.1, 0.8)) ggplot2::ggsave(“fig3_revision__umap_grid.png”, fig_3_umap_grid, width = 4.4 * 2^11, height = 1 * 2^11, units = “px”)","code":""},{"path":[]},{"path":[]},{"path":"https://lcrawlab.github.io/recallreproducibility/articles/08_figure3.html","id":"new-volcano-plots","dir":"Articles","previous_headings":"","what":"new volcano plots","title":"7. Figure 3","text":"revision_fig3_volcano_plots <- function(tissue, tissue_name, recall_cluster1, recall_cluster2, default_cluster1, default_cluster2, ymax=150, y_increment = 10, genes_to_label_left=c(), genes_to_label_right=c()) { volcano_plot <- function(seurat_obj, markers, cluster1, cluster2, title, logfc_thresh=1.0, genes_to_label_left=c(), genes_to_label_right=c()) { markerslog10pval<−−log10(markerslog10pval <- -log10(markersp_val) } # re-index clusters one-based tissue@meta.datacallbackidents<−.factor(.numeric(tissue@meta.datacallback_idents <- .factor(.numeric(tissue@meta.datacallback_idents)) Seurat::Idents(tissue) <- tissue@meta.data$callback_idents #DimPlot(tissue) recall_markers <- Seurat::FindMarkers(tissue, ident.1 = recall_cluster1, ident.2 = recall_cluster2, logfc.threshold = 0.0, ) # highlighted markers subset(recall_markers, abs(avg_log2FC) > 1.0 & p_val_adj < 0.05) recall_title <- paste0(“recall+ZIP: Cluster”, recall_cluster1, ” vs Cluster “, recall_cluster2) volcano_recall <- volcano_plot(tissue, recall_markers, recall_cluster1, recall_cluster2, recall_title, genes_to_label_left = genes_to_label_left, genes_to_label_right = genes_to_label_right) # re-index clusters one-based tissue@meta.dataseuratclusters<−.factor(.numeric(tissue@meta.dataseurat_clusters <- .factor(.numeric(tissue@meta.dataseurat_clusters)) Seurat::Idents(tissue) <- tissue@meta.data$seurat_clusters default_markers <- Seurat::FindMarkers(tissue, ident.1 = default_cluster1, ident.2 = default_cluster2, logfc.threshold = 0.0, ) # highlighted markers subset(default_markers, abs(avg_log2FC) > 1.0 & p_val_adj < 0.05) default_title <- paste0(“Default: Cluster”, default_cluster1, ” vs Cluster “, default_cluster2) volcano_default <- volcano_plot(tissue, default_markers, default_cluster1, default_cluster2, default_title) return(list(“volcano_recall” = volcano_recall, “volcano_default” = volcano_default)) } volcanos = revision_fig3_volcano_plots(limb_muscle, “limb_muscle”, recall_cluster1 = 1, recall_cluster2 = 2, default_cluster1 = 1, default_cluster2 = 3, ymax=150, y_increment = 100, genes_to_label_left = mesenchymal_stem_cells_marker_genes, genes_to_label_right = skeletal_muscle_satellite_cell_marker_genes) ggplot2::ggsave(“fig3_revision_limb_muscle_volcano_plot_default.png”, volcanos$volcano_default, width = 2^12, height = 2^12, units = \"px\") ggplot2::ggsave(\"fig3_revision_limb_muscle_volcano_plot_recall.png\", volcanos$volcano_recall, width = 2^12, height = 2^12, units = “px”)","code":"markers$Name <- rownames(markers)  p_val_thresh <- -log10(0.05 / dim(seurat_obj)[1])   markers$log10pval[markers$log10pval > ymax] <- ymax   markers$color <- \"grey\"  markers[(markers$avg_log2FC > 1) & (markers$log10pval > p_val_thresh),]$color <- \"red\" markers[(markers$avg_log2FC < -1) & (markers$log10pval > p_val_thresh),]$color <- \"blue\"   p <- ggplot2::ggplot(markers, ggplot2::aes(x=avg_log2FC, y=log10pval, color = color)) +    ggplot2::geom_point() +   ggplot2::scale_colour_identity() +   ggrepel::geom_label_repel(data = markers %>% dplyr::filter(Name %in% genes_to_label_right), ggplot2::aes(label = Name),                             min.segment.length = 0,                             box.padding = 1.5,                             point.size = 2,                             size = 10,                             force = 12,                             xlim  = c(14,19),                             ylim  = c(50,160),                             hjust=0,                             direction = \"y\",                             max.overlaps = Inf) + # right side isn't showing half of the labels   ggrepel::geom_label_repel(data = markers %>% dplyr::filter(Name %in% genes_to_label_left), ggplot2::aes(label = Name),                             min.segment.length = 0,                             box.padding = 1.5,                             point.size = 2,                             size = 10,                             force = 12,                             seed = 123,                             xlim  = c(-14,-19),                             ylim  = c(50,160),                             hjust=1,                             direction = \"y\",                             max.overlaps = Inf) + # left side isn't showing half of the labels   #gghighlight::gghighlight(log10pval > p_val_thresh) +    #gghighlight::gghighlight(abs(avg_log2FC) > logfc_thresh) +    ggplot2::xlim(-20,20) +    ggplot2::xlab(\"Average Log2-Fold Change\") +   ggplot2::ggtitle(title) +    ggplot2::theme_bw() +   ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5),                  axis.title = ggplot2::element_text(size=40),                  axis.text = ggplot2::element_text(size=32),                  title = ggplot2::element_text(size=44),                  legend.title = ggplot2::element_blank(),                  legend.background = ggplot2::element_blank(),                  legend.box.background = ggplot2::element_rect(colour = \"black\"),                   legend.text = ggplot2::element_text(size=32),                  legend.position = c(0.8, 0.6),                  legend.key.size = ggplot2::unit(3, \"cm\")) +   ggplot2::geom_hline(ggplot2::aes(yintercept=p_val_thresh), size = 1, linetype = 'dashed', show.legend = TRUE) +   ggplot2::geom_vline(ggplot2::aes(xintercept=logfc_thresh), linetype = 'dashed', size = 1) +   ggplot2::geom_vline(ggplot2::aes(xintercept=-logfc_thresh), linetype = 'dashed', size = 1) +   ggplot2::scale_linetype_manual(values=c(\"dashed\")) +   #scale_color_manual(values=c(\"blue\", \"red\")) +   # annotate p-value threshold   ggplot2::annotate(\"segment\", x = 13, xend = 15, y = 18, yend = p_val_thresh, colour = \"black\", linetype = \"dashed\", size = 2) +   ggplot2::annotate(\"label\", x = 13, y = 25, label = \"Adj. P-value = 0.05\", size = 12) +   # annotate logFC thresholds   ggplot2::annotate(\"segment\", x = 11.6, xend = 1.0, y = 40, yend = 60, colour = \"black\", linetype = \"dashed\", size = 2) +   ggplot2::annotate(\"label\", x = 13, y = 40, label = \"Avg. Log2-FC = 1.0\", size = 12) +   ggplot2::annotate(\"segment\", x = -11.6, xend = -1.0, y = 40, yend = 60, colour = \"black\", linetype = \"dashed\", size = 2) +   ggplot2::annotate(\"label\", x = -13, y = 40, label = \"Avg. Log2-FC = -1.0\", size = 12) +   #geom_text_repel(data=subset(markers, abs(avg_log2FC) > logfc_thresh & p_val_adj < 0.05), aes(label = Name), size = 8)   ggplot2::scale_y_continuous(name = \"-log10 P-value\", limits = c(0, ymax))#, #breaks = seq(from = 0, to = ymax, by = y_increment) #labels = c(seq(from = 0, to = ymax - 100, by = y_increment), paste0('\\u2265', ymax))) return(p)"},{"path":"https://lcrawlab.github.io/recallreproducibility/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alan DenAdel. Author, maintainer.","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"DenAdel (2024). recallreproducibility: Reproducibility recall manuscript. R package version 1.0.0, https://lcrawlab.github.io/recallreproducibility/.","code":"@Manual{,   title = {recallreproducibility: Reproducibility of recall manuscript},   author = {Alan DenAdel},   year = {2024},   note = {R package version 1.0.0},   url = {https://lcrawlab.github.io/recallreproducibility/}, }"},{"path":[]},{"path":"https://lcrawlab.github.io/recallreproducibility/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Reproducibility of recall manuscript","text":"hope make simple possible reproduce results found knockoff calibration method avoid -clustering single-cell RNA-sequencing. end, organized analysis scripts series R vignettes repository.","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/index.html","id":"reproducing-figures-from-the-recall-manuscript","dir":"","previous_headings":"","what":"Reproducing Figures from the recall manuscript","title":"Reproducibility of recall manuscript","text":"Clone repository: , navigate repo directory launch R can build entire website using following line R code. Note Rmarkdown file fully run R default. properly run Rmarkdown file run website building process, need remove file header. recommend vignettes actually use recall, sc-SHC, CHOIR clustering long runtime. Rather, R portions files put script run using Rscript.","code":"git clone https://github.com/lcrawlab/recallreproducibility cd recallreproducibility R pkgdown::build_site() knitr::opts_chunk$set(eval = FALSE)"},{"path":"https://lcrawlab.github.io/recallreproducibility/index.html","id":"relevant-citations","dir":"","previous_headings":"","what":"Relevant Citations","title":"Reproducibility of recall manuscript","text":"recall currently bioRxiv, . . DenAdel, M. Ramseier, . Navia, . Shalek, S. Raghavan, P. Winter, . Amini, L. Crawford. knockoff calibration method avoid -clustering single-cell RNA-sequencing. bioRxiv.","code":""},{"path":"https://lcrawlab.github.io/recallreproducibility/index.html","id":"questions-and-feedback","dir":"","previous_headings":"","what":"Questions and Feedback","title":"Reproducibility of recall manuscript","text":"questions concerns recallreproducibility recall R package, please contact Alan DenAdel Lorin Crawford. feedback manuscript figure reproducibility greatly appreciated.","code":""}]
